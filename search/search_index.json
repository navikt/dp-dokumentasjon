{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hjem","text":"<p>Velkommen til teknisk dokumentasjon for Dagpengeklyngen</p>"},{"location":"innbyggerflater/","title":"Om innbyggerflate","text":""},{"location":"innbyggerflater/innsyn/","title":"Innsyn","text":""},{"location":"innbyggerflater/kodekvalitet/","title":"Prinsipper","text":""},{"location":"innbyggerflater/kodekvalitet/#introduksjon","title":"Introduksjon","text":"<p>Kode lever. Det er ikke noe man skriver og glemmer. Brukere \u00f8nsker nye funksjoner. Feil m\u00e5 fikses. Koden skal v\u00e6re enkel \u00e5 forst\u00e5, selv om du ikke har sett den f\u00f8r eller det har g\u00e5tt lang tid siden du sist s\u00e5 p\u00e5 koden. Dette er grunnen til at kodekvalitet er viktig. Programmering handler mer om \u00e5 skrive kode som du og dine medarbeidere kan forst\u00e5, og mindre om \u00e5 vise hvor flink du er med programmeringsspr\u00e5ket ditt.</p> <p>En forskjell mellom en dyktig programmerer og en profesjonell programmerer er at den profesjonelle programmereren forst\u00e5r at klarhet er viktig.</p> <p>Profesjonelle bruker sine ferdigheter til \u00e5 skrive kode som andre kan forst\u00e5.</p>"},{"location":"innbyggerflater/kodekvalitet/#hvordan-male-kodekvalitet","title":"Hvordan m\u00e5le kodekvalitet","text":"<p>Vurder en bygning med noen \u00f8delagte vinduer. Hvis vinduene ikke blir reparert, er tendensen at h\u00e6rverkere \u00f8delegger flere vinduer. Til slutt &gt;kan de til og med bryte seg inn i bygningen, og hvis den st\u00e5r tom, kanskje til og med okkupere den eller tenne branner inni.</p> <p>James Q. Wilson og George Kelling, 1982 - Broken windows theory</p>"},{"location":"innbyggerflater/kodekvalitet/#clean-code","title":"Clean code","text":"<p>Clean code ser ut som om den ble skrevet av noen som bryr seg.</p> <code>Clean code</code> <p>Med clean code mener vi lesbare kode eller obvious code</p>"},{"location":"innbyggerflater/kodekvalitet/#navngivning","title":"Navngivning","text":"<p>Navnet p\u00e5 en variabel, funksjon eller klasse b\u00f8r besvare alle de viktige sp\u00f8rsm\u00e5lene. Det b\u00f8r fortelle deg hvorfor det eksisterer, hva det gj\u00f8r, og hvordan det brukes.</p> <p>Hvis et navn krever en kommentar, avsl\u00f8rer ikke navnet sin hensikt.</p>"},{"location":"innbyggerflater/kodekvalitet/#kall-det-for-det-det-er","title":"Kall det for det det er.","text":"<p>Ikke kall en spade for en spade. Kall en sandkassespade for en sandkassespade og en anleggsspade for en anleggsspade. </p>"},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-darlig-kode","title":"Eksempel p\u00e5 d\u00e5rlig kode","text":"<pre><code>public String getOrgNr() {\n    String[] split = description.split(\"-\");\n\n    return split[0].trim();\n}\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-bedre-kode","title":"Eksempel p\u00e5 bedre kode","text":"<pre><code>public String getOrganisasjonsnummerFraBeskrivelse() {\n    String[] split = description.split(\"-\");\n\n    return split[0].trim();\n}\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#unnga-forkortelser","title":"Unng\u00e5 forkortelser","text":""},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-darlig-kode_1","title":"Eksempel p\u00e5 d\u00e5rlig kode","text":"<pre><code>NIDPPrincipal up = resolveUserPrincipal();\nUserAuthority ua = nidpPrincipal.getAuthority();\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-bedre-kode_1","title":"Eksempel p\u00e5 bedre kode","text":"<pre><code>NIDPPrincipal nidpPrincipal = resolveUserPrincipal();\nUserAuthority userAuthority = nidpPrincipal.getAuthority();\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#navngivning-og-omfang","title":"Navngivning og omfang","text":""},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-darlig-kode_2","title":"Eksempel p\u00e5 d\u00e5rlig kode","text":"<pre><code>class FakturaService {\n  public static long nummer = 123456789;\n...\n}\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-bedre-kode_2","title":"Eksempel p\u00e5 bedre kode","text":"<pre><code>class FakturaService {\n  public static long MAKS_FAKTURABEL\u00d8P = 123456789;\n}\n</code></pre> <pre><code>for(int i=0;i&lt; 10;i++){\n\n}\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#prv-a-gjre-koden-menneskelesbar","title":"Pr\u00f8v \u00e5 gj\u00f8re koden menneskelesbar","text":"<pre><code>if (arbeidsforholdErAvsluttet())\n</code></pre> <p>// eller</p> <pre><code>if (erArbeidsforholdAvsluttet())\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#struktur","title":"Struktur","text":""},{"location":"innbyggerflater/kodekvalitet/#prinsipp-om-single-responsibility","title":"Prinsipp om single responsibility","text":"<p>En klasse/metode skal kun ha \u00e9n grunn til \u00e5 bli endret.</p> <p>Prinsippet om single responsibility</p>"},{"location":"innbyggerflater/kodekvalitet/#sma-biter","title":"Sm\u00e5 biter","text":"<p>Sm\u00e5 klasser og metoder er lettere \u00e5 teste, gjenbruke og vedlikeholde. Det er ogs\u00e5 lettere \u00e5 gi riktige navn til sm\u00e5 biter av kode.</p> <p>Det er i  det minste f\u00f8lgende grunner til \u00e5 trekke ut kode til en klasse eller metode:</p> <ul> <li>Lesbarhet</li> <li>Testing</li> <li>Gjenbruk</li> </ul> <p>St\u00f8rrelsesregler:</p> <p>Den f\u00f8rste regelen for klasser er at de skal v\u00e6re sm\u00e5.</p> <p>Den andre regelen for klasser er at de skal v\u00e6re mindre enn det.</p>"},{"location":"innbyggerflater/kodekvalitet/#pakkestruktur","title":"Pakkestruktur","text":"<p>Pakkestrukturen b\u00f8r organiseres etter funksjoner/forretningslogikk og ikke tekniske aspekter.</p> <p>Strukturen gjorde det ogs\u00e5 tyngre \u00e5 resonere rundt endring, og hvordan endringen treffer kodebasen. St\u00f8rre deler av  pakkestrukturen var stort sett alltid involvert.</p> <p>Hver commit er en ny deploy til prod, del 3 - Terje Heen</p> <p>En pakke som inneholder koden til et deldomene b\u00f8r kunne st\u00e5 helt p\u00e5 egne bein. Den b\u00f8r kunne taes ut av applikasjonen og legges inne i en annen applikasjon uten store problemer.</p>"},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-darlig-pakkestruktur","title":"Eksempel p\u00e5 d\u00e5rlig pakkestruktur","text":""},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-bedre-pakkestruktur","title":"Eksempel p\u00e5 bedre pakkestruktur","text":""},{"location":"innbyggerflater/kodekvalitet/#komponentstruktur","title":"Komponentstruktur","text":"<p>SKAL VI HA NOE HER?</p>"},{"location":"innbyggerflater/kodekvalitet/#kommentarer","title":"Kommentarer","text":"<p>Tommelfingerregel:</p> <p>Kodekommentarer er potensielle l\u00f8gner!</p> <p>Tommelfingerregelen er at kommentarer ikke b\u00f8r brukes. Hvis du befinner deg i en situasjon der du \u00f8nsker \u00e5 skrive en kommentar, er det sannsynligvis noe galt med koden din.</p>"},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-darlig-kode_3","title":"Eksempel p\u00e5 d\u00e5rlig kode","text":"<pre><code>// Hvis salgsordregruppeBeskrivelse er tom\nif (salgsordregruppeBeskrivelse == null || salgsordregruppeBeskrivelse.length() == 0) {\n    return \"\";\n}\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#eksempel-pa-bedre-kode_3","title":"Eksempel p\u00e5 bedre kode","text":"<pre><code>if (erSalgsordregruppeBeskrivelseTom()) return \"\";\n\nprivat boolean erSalgsordregruppeBeskrivelseTom() {\n    return salgsordregruppeBeskrivelse == null\n    || salgsordregruppeBeskrivelse.length() == 0;\n}\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#nar-kommentarer-er-ndvendige","title":"N\u00e5r kommentarer er n\u00f8dvendige","text":"<p>Kommentarer er, i beste fall, en n\u00f8dvendig ondskap.</p> <p>I noen tilfeller er kommentarer n\u00f8dvendige:</p>"},{"location":"innbyggerflater/kodekvalitet/#for-a-forklare-hvorfor-lsningen-er-implementert-pa-denne-maten","title":"For \u00e5 forklare hvorfor l\u00f8sningen er implementert p\u00e5 denne m\u00e5ten","text":"<p>For eksempel en midlertidig l\u00f8sning for en feil i en ekstern avhengighet:</p> <pre><code>FakturagrunnlagResource-faktura = fakturafabrikk.lagFaktura(claim);\n// Visma Enterprise har et problem hvis mer enn \u00e9n faktura opprettes med\n// ett sekunds mellomrom. Derfor forsinkelse hvis n\u00f8dvendig.\nforsinkOrdreSending.forsinkHvisN\u00f8dvendig();\nURI plassering = restUtil.post(fakturaSluttPunkt, faktura);\n</code></pre>"},{"location":"innbyggerflater/kodekvalitet/#apne-api-er","title":"\u00c5pne API-er","text":"<p>Hvis vi har \u00e5pne API-er som:</p> <ul> <li>Kode som en delt bibliotek (KDoc/Javadoc)</li> <li>REST-API-er (OpenAPI-spesifikasjon (OAS))</li> </ul> <p>kan det v\u00e6re en god id\u00e9 \u00e5 ha kommentarer.</p> <p>Eksempel</p> <pre><code>/**\n * Representerer en aktivitet som er gjort i tilknytning til en hendelse.\n *\n * @property melding knyttet til aktiviteten\n * @property kontekst liste med [Kontekst] for aktiviteten\n * @property tidsstempel for n\u00e5r aktiviteten ble gjort. Blir automatisk satt til tidspunktet for n\u00e5r\n * Aktivitet blir laget hvis ikke annet er angitt\n */\nclass Aktivitet(\n    private val melding: String,\n    private val kontekst: List&lt;Kontekst&gt;,\n    private val tidsstempel: LocalDateTime = LocalDateTime.now(),\n) {\n\n    /**\n     * @return meldingen i aktiviteten\n     */\n    fun melding() = melding\n\n    /**\n     * @return tidsstempelet til aktiviteten\n     */\n    fun tidsstempel() = tidsstempel\n\n    /**\n     * @return liste over kontekster knyttet til aktiviteten\n     */\n    fun kontekst() = kontekst\n}\n</code></pre> <p>Document Kotlin code: KDoc</p>"},{"location":"innbyggerflater/kodekvalitet/#testing","title":"Testing","text":"<p>Feils\u00f8king er dobbelt s\u00e5 vanskelig som \u00e5 skrive et program i utgangspunktet. S\u00e5 hvis du er s\u00e5 smart som du kan v\u00e6re n\u00e5r du skriver det, hvordan vil du noensinne feils\u00f8ke det?</p>"},{"location":"innbyggerflater/kodekvalitet/#hvorfor-tester-vi","title":"Hvorfor tester vi?","text":"<p>Vi tester fordi:</p> <ul> <li>Billigere / raskere \u00e5 finne feilen tidlig i utviklingsprosessen</li> <li>Rask tilbakemelding</li> <li>For \u00e5 kunne refaktorere</li> <li>Dokumentasjon</li> <li>Gj\u00f8re det enklere \u00e5 h\u00e5ndtere komplekse problemer</li> <li>Raskere utvikling</li> <li>Bedre kode</li> </ul>"},{"location":"innbyggerflater/kodekvalitet/#egenskapene-til-gode-tester","title":"Egenskapene til gode tester","text":"<p>En test er mer en spesifikasjon enn en test. Den skal spesifisere hvordan noe fungerer.</p> <ul> <li>M\u00e5 v\u00e6re raske (vanligvis millisekunder)</li> <li>Tregere tester vil ofte v\u00e6re integrasjonstester</li> <li>Del testene inn i enhets- og integrasjonstester</li> <li>En test m\u00e5 teste et konsept</li> <li>Testen b\u00f8r rydde opp etter seg</li> <li>Uavhengig av rekkef\u00f8lge</li> <li>Hold testene enkle</li> <li>Unng\u00e5 \u00e5 bruke rammeverk hvis mulig (for eksempel Spring)</li> <li>Testene m\u00e5 alltid kj\u00f8res f\u00f8r koden sjekkes inn i versjonskontrollen</li> </ul>"},{"location":"innbyggerflater/kodekvalitet/#hvor-mye-av-en-applikasjon-skal-testes","title":"Hvor mye av en applikasjon skal testes","text":"<p>Det er ikke viktig \u00e5 teste 100% av koden. Faktisk er det irrelevant hvor mange prosent av koden som er testet. Det viktige er \u00e5 teste s\u00e5 mye av koden at du f\u00f8ler deg mindre stresset n\u00e5r du distribuerer og refaktorerer koden. Koden b\u00f8r ogs\u00e5 v\u00e6re under kontinuerlig utvikling.</p> <p>Ting \u00e5 teste:</p> <ul> <li>Logikk</li> <li>Kode for kartlegging</li> <li>Kontroll\u00f8rer - kontrakten mellom koden og andre systemer</li> <li>Kode som trenger ekstra dokumentasjon</li> </ul> <p>Ting \u00e5 unng\u00e5 \u00e5 teste:</p> <ul> <li>Tredjepartsbiblioteker</li> <li>Hvis du ender opp med \u00e5 mocking alt</li> </ul>"},{"location":"innbyggerflater/meldeplikt/","title":"Meldeplikt","text":""},{"location":"innbyggerflater/meldeplikt/#kort-om-meldekort","title":"Kort om meldekort","text":"<p>N\u00e5r man f\u00e5r Dagpenger (DP), Arbeidsavklaringspenger (AAP) eller Tiltakspenger (TP) har man meldeplikt. Dvs. man m\u00e5 sende meldekort hver fjortende dag. Meldekortet er et skjema man fyller ut, der man gir NAV opplysninger om blant annet jobb, aktiviteter og frav\u00e6r de siste 14 dagene.</p> <p>Team Dagpenger \"arvet\" ansvaret for \u00e5 gj\u00f8re endringer og oppgraderinger i meldekort-l\u00f8sningen fordi alle fra Team Meldekort ble flyttet til Team Dagpenger. Dagpenger-delen i meldekort-l\u00f8sningen skal erstattes med <code>dp-rapportering-frontend</code>. Team Dagpenger tenkte \u00e5 pr\u00f8ve den nye l\u00f8sningen med begrenset antall brukere f\u00f8rst. For \u00e5 velge brukere som skulle sendes til den nye l\u00f8sningen, ble opprettet en mekanisme som sjekker hvem som skal sendes:</p> <ul> <li>Det finnes en tabell i meldkort-api sin database som inneholder f\u00f8dselsnummer</li> <li>Hvis f\u00f8dselsnumeret til bruker er i denne tabellen, sendes brukeren til den nye l\u00f8sningen</li> </ul>"},{"location":"innbyggerflater/meldeplikt/#arkitektur","title":"Arkitektur","text":""},{"location":"innbyggerflater/meldeplikt/#applikasjoner","title":"Applikasjoner","text":"<ul> <li>Meldekort frontend</li> <li>Meldekort mikrofrontend</li> <li>Meldekort API</li> <li>Meldekortservice</li> <li>Meldekortkontroll API  </li> </ul> <p>VIKTIG! Tekster som vises i meldekort-frontend kommer fra <code>meldekort-api</code>. Vi m\u00e5 vise de tekstene som var gyldige for det valgte meldekortet (for den meldeperioden). Det finnes fortsatt 2 filer med tekster i meldekort (<code>src\\app\\mock\\responses\\tekster_nb.json og src\\app\\mock\\responses\\tekster_en.json</code>), men disse er ment for lokalkj\u00f8ring/testing og inneholder ikke alle/siste versjoner av tekstene. <code>meldekort-api</code> har en tabell med tekstene i sin database. Denne tabellen er fylt ut ved hjelp av <code>R__recreate_texts-migrasjonen</code> og har disse kolonnene: - <code>kode</code> - <code>verdi</code> - <code>sprak</code> - <code>fra_dato</code></p> <p>For \u00e5 opprette en tekst i denne tabellen m\u00e5 man skrive i <code>R__recreate_texts</code>, f.eks: <pre><code>INSERT INTO tekst (kode, verdi, sprak,  fra_dato) VALUES ('overskrift.bruttoBelop', 'Brutto bel\u00f8p ', 'nb',  TO_DATE('1000-01-01', 'YYYY-MM-DD'));\nINSERT INTO tekst (kode, verdi, sprak,  fra_dato) VALUES ('overskrift.bruttoBelop', 'Gross amount ', 'en',  TO_DATE('1000-01-01', 'YYYY-MM-DD'));\n</code></pre></p> <p>Dato <code>1000-01-01</code> betyr at denne teksten skal i praksis gjelde for alle meldekort</p> <p>For \u00e5 ha forskjellige versjoner av samme tekst: <pre><code>INSERT INTO tekst (kode, verdi, sprak,  fra_dato) VALUES ('textKode', 'Tekst v1 ', 'nb',  TO_DATE('1000-01-01', 'YYYY-MM-DD'));\nINSERT INTO tekst (kode, verdi, sprak,  fra_dato) VALUES ('textKode', 'Text v1 ',  'en',  TO_DATE('1000-01-01', 'YYYY-MM-DD'));\nINSERT INTO tekst (kode, verdi, sprak,  fra_dato) VALUES ('textKode', 'Tekst v2 ', 'nb',  TO_DATE('2023-10-29', 'YYYY-MM-DD'));\nINSERT INTO tekst (kode, verdi, sprak,  fra_dato) VALUES ('textKode', 'Text v2 ',  'en',  TO_DATE('2023-10-29', 'YYYY-MM-DD'));\n</code></pre></p> <p>Da skal v1 vises n\u00e5r man har en aktiv meldeperiode som er f\u00f8r <code>2023-10-29</code> og <code>v2</code> skal vises for meldeperioder etter <code>2023-10-29</code>.</p>"},{"location":"innbyggerflater/meldeplikt/#utvikling","title":"Utvikling","text":""},{"location":"innbyggerflater/meldeplikt/#vanlig-utviklingsprosess","title":"Vanlig utviklingsprosess","text":"<ol> <li>Opprett en ny branch  </li> <li>Gj\u00f8r n\u00f8dvendige endringer i denne branchen  </li> <li> <p>Deploy branchen til Q1 og/eller Q2. For \u00e5 gj\u00f8re dette: </p> <ul> <li>\u00c5pne GitHub repo &gt; Actions &gt; Build and Deploy to dev &gt; Run workflow &gt; Velg riktig branch</li> <li>Velg milj\u00f8 Q1 eller Q2 &gt; Run workflow</li> </ul> </li> <li> <p>Sjekk endringene i Q1 og/eller Q2  </p> </li> <li>Opprett en pull request  </li> <li>N\u00e5r PRen er sjekket, merge branchen til master  </li> <li> <p>Bygg release. For \u00e5 gj\u00f8re dette:  </p> <ul> <li>\u00c5pne GitHub repo &gt; Actions &gt; Build and Deploy to dev &gt; Run workflow &gt; Velg master branch</li> <li>velg milj\u00f8 Q1 eller Q2, velg bump &gt; Run workflow  </li> </ul> </li> <li> <p>Deploy release til prod (N\u00e5r er det smartest \u00e5 release til prod?). For \u00e5 gj\u00f8re dette:  </p> <ul> <li>\u00c5pne GitHub repo &gt; Actions &gt; Deploy release to dev or prod &gt; Run workflow &gt; Velg master branch</li> <li>skriv inn \"p\" som Milj\u00f8, skriv inn den versjonen som skal deployes &gt; Run workflow  </li> </ul> </li> <li> <p>Sjekk at alt fungerer (Overv\u00e5kning)</p> </li> <li>Oppdater Confluence</li> </ol>"},{"location":"innbyggerflater/meldeplikt/#nar-er-det-smartest-a-release-til-prod","title":"N\u00e5r er det smartest \u00e5 release til prod?","text":"<p>Flertallet sender meldekortene sine fra fredag til mandag.  Det betyr at det ikke er veldig smart \u00e5 deploye noe til prod i disse dagene med mindre det er en prodfeil fiks. Det er bedre \u00e5 deploye til prod fra tirsdag til torsdag.</p> <p> Antall REST-kall for \u00e5 kontrollere meldekort per ukedag fra mandag til s\u00f8ndag</p>"},{"location":"innbyggerflater/meldeplikt/#overvakning","title":"Overv\u00e5kning","text":"<ul> <li>Nyttig Grafana dashboard for \u00e5 sjekke at alt fungerer og meldekort kommer inn</li> <li>meldekort-api dashboard</li> <li>meldekortservice dashboard</li> </ul> <p>Man kan ogs\u00e5 sjekke <code>kall_logg-tabellene</code> i <code>meldekort-api</code>, <code>meldekorservice</code> og <code>meldekortkontroll-api</code>. Disse applikasjonene logger alle requeste'er som kommer inn og alle request'er de sender ut og alle respons'er. Logg slettes etter 30 dager i meldekorservice, 90 dager i <code>meldekort-api</code>, 120 dager i <code>meldekortkontroll-api</code>.</p>"},{"location":"innbyggerflater/nav-no/","title":"nav.no","text":""},{"location":"innbyggerflater/rapportering/","title":"Rapportering","text":""},{"location":"innbyggerflater/soknad/","title":"Dagpenges\u00f8knad","text":""},{"location":"innbyggerflater/soknad/#oversikt","title":"Oversikt","text":""},{"location":"innbyggerflater/soknad/#abonnerer-pa-hendelser","title":"Abonnerer p\u00e5 hendelser","text":""},{"location":"innbyggerflater/soknad/#publiserer-hendelser","title":"Publiserer hendelser","text":""},{"location":"innbyggerflater/systemkart/","title":"Overordnet arkitektur","text":""}]}