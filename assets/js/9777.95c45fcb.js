"use strict";(self.webpackChunkdp_dokumentasjon=self.webpackChunkdp_dokumentasjon||[]).push([[9777],{9777:(e,n,r)=>{r.r(n),r.d(n,{default:()=>t});const t='# Kodekvalitet\n\n![Boy scout rule](./boy-scout-rule.png)\n\n## Introduksjon\n\nKode lever. Det er ikke noe man skriver og glemmer. Brukere \xf8nsker nye funksjoner. Feil m\xe5 fikses. Koden skal v\xe6re enkel \xe5 forst\xe5, selv om du ikke har sett den f\xf8r eller det har g\xe5tt lang tid siden du sist s\xe5 p\xe5 koden. Dette er grunnen til at kodekvalitet er viktig. Programmering handler mer om \xe5 skrive kode som du og dine medarbeidere kan forst\xe5, og mindre om \xe5 vise hvor flink du er med programmeringsspr\xe5ket ditt.\n\n> En forskjell mellom en dyktig programmerer og en profesjonell programmerer er at den profesjonelle programmereren forst\xe5r at klarhet er viktig.\n\nProfesjonelle bruker sine ferdigheter til \xe5 skrive kode som andre kan forst\xe5.\n\n## Hvordan m\xe5le kodekvalitet\n\n![wtf](./wtf.png)\n\n> Vurder en bygning med noen \xf8delagte vinduer. Hvis vinduene ikke blir reparert, er tendensen at h\xe6rverkere \xf8delegger flere vinduer. Til slutt >kan de til og med bryte seg inn i bygningen, og hvis den st\xe5r tom, kanskje til og med okkupere den eller tenne branner inni.\n>\n> [James Q. Wilson og George Kelling, 1982 - Broken windows theory](https://en.wikipedia.org/wiki/Broken_windows_theory)\n\n## Clean code\n\n> _Clean code_ ser ut som om den ble skrevet av noen som bryr seg.\n\n`Clean code`\n\n: Med _clean code_ mener vi lesbare kode eller _obvious code_\n\n### Navngivning\n\nNavnet p\xe5 en variabel, funksjon eller klasse b\xf8r besvare alle de viktige sp\xf8rsm\xe5lene. Det b\xf8r fortelle deg hvorfor det eksisterer, hva det gj\xf8r, og hvordan det brukes.\n\nHvis et navn krever en kommentar, avsl\xf8rer ikke navnet sin hensikt.\n\n#### Kall det for det det er.\n\n> Ikke kall en spade for en spade. Kall en _sandkassespade_ for en _sandkassespade_ og en _anleggsspade_ for en _anleggsspade_.\n\n##### Eksempel p\xe5 d\xe5rlig kode\n\n```java\npublic String getOrgNr() {\n    String[] split = description.split("-");\n\n    return split[0].trim();\n}\n```\n\n##### Eksempel p\xe5 bedre kode\n\n```java\npublic String getOrganisasjonsnummerFraBeskrivelse() {\n    String[] split = description.split("-");\n\n    return split[0].trim();\n}\n```\n\n#### Unng\xe5 forkortelser\n\n##### Eksempel p\xe5 d\xe5rlig kode\n\n```java\nNIDPPrincipal up = resolveUserPrincipal();\nUserAuthority ua = nidpPrincipal.getAuthority();\n```\n\n##### Eksempel p\xe5 bedre kode\n\n```java\nNIDPPrincipal nidpPrincipal = resolveUserPrincipal();\nUserAuthority userAuthority = nidpPrincipal.getAuthority();\n```\n\n#### Navngivning og omfang\n\n##### Eksempel p\xe5 d\xe5rlig kode\n\n```java\nclass FakturaService {\n  public static long nummer = 123456789;\n...\n}\n```\n\n##### Eksempel p\xe5 bedre kode\n\n```java\nclass FakturaService {\n  public static long MAKS_FAKTURABEL\xd8P = 123456789;\n}\n\n```\n\n```java\nfor(int i=0;i< 10;i++){\n\n}\n```\n\n#### Pr\xf8v \xe5 gj\xf8re koden menneskelesbar\n\n```java\nif (arbeidsforholdErAvsluttet())\n```\n\n// eller\n\n```java\nif (erArbeidsforholdAvsluttet())\n```\n\n### Struktur\n\n#### Prinsipp om single responsibility\n\nEn klasse/metode skal kun ha \xe9n grunn til \xe5 bli endret.\n\n[Prinsippet om single responsibility](https://en.wikipedia.org/wiki/Single-responsibility_principle)\n\n#### Sm\xe5 biter\n\nSm\xe5 klasser og metoder er lettere \xe5 teste, gjenbruke og vedlikeholde. Det er ogs\xe5 lettere \xe5 gi riktige navn til sm\xe5 biter av kode.\n\nDet er i det minste f\xf8lgende grunner til \xe5 trekke ut kode til en klasse eller metode:\n\n- Lesbarhet\n- Testing\n- Gjenbruk\n\n> St\xf8rrelsesregler:\n>\n> **Den f\xf8rste regelen** for klasser er at de skal v\xe6re sm\xe5.\n>\n> **Den andre regelen** for klasser er at de skal v\xe6re mindre enn det.\n\n#### Pakkestruktur\n\nPakkestrukturen b\xf8r organiseres etter funksjoner/forretningslogikk og ikke tekniske aspekter.\n\n> Strukturen gjorde det ogs\xe5 tyngre \xe5 resonere rundt endring, og hvordan endringen treffer kodebasen. St\xf8rre deler av\n> pakkestrukturen var stort sett alltid involvert.\n>\n> [Hver commit er en ny deploy til prod, del 3 - Terje Heen](https://www.linkedin.com/pulse/hver-commit-er-en-ny-deploy-til-prod-del-3-terje-heen/)\n\nEn pakke som inneholder koden til et deldomene b\xf8r kunne st\xe5 helt p\xe5 egne bein. Den b\xf8r kunne taes ut av applikasjonen og legges inne\ni en annen applikasjon uten store problemer.\n\n##### Eksempel p\xe5 d\xe5rlig pakkestruktur\n\n![](./teksnisk-struktur.png)\n\n##### Eksempel p\xe5 bedre pakkestruktur\n\n![](./feature-struktur.png)\n\n#### Komponentstruktur\n\nSKAL VI HA NOE HER?\n\n### Kommentarer\n\nTommelfingerregel:\n\n> Kodekommentarer er potensielle l\xf8gner!\n\nTommelfingerregelen er at kommentarer ikke b\xf8r brukes. Hvis du befinner deg i en situasjon der du \xf8nsker \xe5 skrive en kommentar, er det sannsynligvis noe galt med koden din.\n\n##### Eksempel p\xe5 d\xe5rlig kode\n\n```java\n// Hvis salgsordregruppeBeskrivelse er tom\nif (salgsordregruppeBeskrivelse == null || salgsordregruppeBeskrivelse.length() == 0) {\n    return "";\n}\n```\n\n##### Eksempel p\xe5 bedre kode\n\n```java\nif (erSalgsordregruppeBeskrivelseTom()) return "";\n\nprivat boolean erSalgsordregruppeBeskrivelseTom() {\n    return salgsordregruppeBeskrivelse == null\n    || salgsordregruppeBeskrivelse.length() == 0;\n}\n```\n\n#### N\xe5r kommentarer er n\xf8dvendige\n\n> Kommentarer er, i beste fall, en n\xf8dvendig ondskap.\n\nI noen tilfeller er kommentarer n\xf8dvendige:\n\n##### For \xe5 forklare hvorfor l\xf8sningen er implementert p\xe5 denne m\xe5ten\n\nFor eksempel en midlertidig l\xf8sning for en feil i en ekstern avhengighet:\n\n```java\nFakturagrunnlagResource-faktura = fakturafabrikk.lagFaktura(claim);\n// Visma Enterprise har et problem hvis mer enn \xe9n faktura opprettes med\n// ett sekunds mellomrom. Derfor forsinkelse hvis n\xf8dvendig.\nforsinkOrdreSending.forsinkHvisN\xf8dvendig();\nURI plassering = restUtil.post(fakturaSluttPunkt, faktura);\n```\n\n##### \xc5pne API-er\n\nHvis vi har \xe5pne API-er som:\n\n- Kode som en delt bibliotek (KDoc/Javadoc)\n- REST-API-er (OpenAPI-spesifikasjon (OAS))\n\nkan det v\xe6re en god id\xe9 \xe5 ha kommentarer.\n\nEksempel\n\n```kotlin\n/**\n * Representerer en aktivitet som er gjort i tilknytning til en hendelse.\n *\n * @property melding knyttet til aktiviteten\n * @property kontekst liste med [Kontekst] for aktiviteten\n * @property tidsstempel for n\xe5r aktiviteten ble gjort. Blir automatisk satt til tidspunktet for n\xe5r\n * Aktivitet blir laget hvis ikke annet er angitt\n */\nclass Aktivitet(\n    private val melding: String,\n    private val kontekst: List<Kontekst>,\n    private val tidsstempel: LocalDateTime = LocalDateTime.now(),\n) {\n\n    /**\n     * @return meldingen i aktiviteten\n     */\n    fun melding() = melding\n\n    /**\n     * @return tidsstempelet til aktiviteten\n     */\n    fun tidsstempel() = tidsstempel\n\n    /**\n     * @return liste over kontekster knyttet til aktiviteten\n     */\n    fun kontekst() = kontekst\n}\n```\n\n[Document Kotlin code: KDoc](https://kotlinlang.org/docs/kotlin-doc.html)\n\n### Testing\n\n> Feils\xf8king er dobbelt s\xe5 vanskelig som \xe5 skrive et program i utgangspunktet. S\xe5 hvis du er s\xe5 smart som du kan v\xe6re n\xe5r du skriver det, hvordan vil du noensinne feils\xf8ke det?\n\n#### Hvorfor tester vi?\n\nVi tester fordi:\n\n- Billigere / raskere \xe5 finne feilen tidlig i utviklingsprosessen\n- Rask tilbakemelding\n- For \xe5 kunne refaktorere\n- Dokumentasjon\n- Gj\xf8re det enklere \xe5 h\xe5ndtere komplekse problemer\n- Raskere utvikling\n- Bedre kode\n\n#### Egenskapene til gode tester\n\nEn test er mer en spesifikasjon enn en test. Den skal spesifisere hvordan noe fungerer.\n\n- M\xe5 v\xe6re raske (vanligvis millisekunder)\n- Tregere tester vil ofte v\xe6re integrasjonstester\n- Del testene inn i enhets- og integrasjonstester\n- En test m\xe5 teste et konsept\n- Testen b\xf8r rydde opp etter seg\n- Uavhengig av rekkef\xf8lge\n- Hold testene enkle\n- Unng\xe5 \xe5 bruke rammeverk hvis mulig (for eksempel Spring)\n- Testene m\xe5 alltid kj\xf8res f\xf8r koden sjekkes inn i versjonskontrollen\n\n#### Hvor mye av en applikasjon skal testes\n\nDet er ikke viktig \xe5 teste 100% av koden. Faktisk er det irrelevant hvor mange prosent av koden som er testet. Det viktige er \xe5 teste s\xe5 mye av koden at du f\xf8ler deg mindre stresset n\xe5r du distribuerer og refaktorerer koden. Koden b\xf8r ogs\xe5 v\xe6re under kontinuerlig utvikling.\n\nTing \xe5 teste:\n\n- Logikk\n- Kode for kartlegging\n- Kontroll\xf8rer - kontrakten mellom koden og andre systemer\n- Kode som trenger ekstra dokumentasjon\n\nTing \xe5 unng\xe5 \xe5 teste:\n\n- Tredjepartsbiblioteker\n- Hvis du ender opp med \xe5 mocking alt\n'}}]);