"use strict";(self.webpackChunkdp_dokumentasjon=self.webpackChunkdp_dokumentasjon||[]).push([[8172],{5125:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>l,toc:()=>a});var t=r(5893),o=r(1151);const d={sidebar_position:4},i="Meldekort-frontend",l={id:"innbyggerflate/losninger/meldeplikt/meldekort-mikrofrontend",title:"Meldekort-frontend",description:'Meldekort-frontend er en "kopi" av den gamle frontenden meldekort.\\',source:"@site/docs/innbyggerflate/losninger/meldeplikt/meldekort-mikrofrontend.mdx",sourceDirName:"innbyggerflate/losninger/meldeplikt",slug:"/innbyggerflate/losninger/meldeplikt/meldekort-mikrofrontend",permalink:"/dp-dokumentasjon/innbyggerflate/losninger/meldeplikt/meldekort-mikrofrontend",draft:!1,unlisted:!1,editUrl:"https://github.com/navikt/dp-dokumentasjon/docs/innbyggerflate/losninger/meldeplikt/meldekort-mikrofrontend.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Meldekort-mikrofrontend",permalink:"/dp-dokumentasjon/innbyggerflate/losninger/meldeplikt/meldekort-frontend"},next:{title:"Rapportering",permalink:"/dp-dokumentasjon/innbyggerflate/losninger/rapportering/"}},s={},a=[];function k(e){const n={a:"a",br:"br",code:"code",h1:"h1",p:"p",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"meldekort-frontend",children:"Meldekort-frontend"}),"\n",(0,t.jsxs)(n.p,{children:['Meldekort-frontend er en "kopi" av den gamle frontenden ',(0,t.jsx)(n.a,{href:"https://github.com/navikt/meldekort",children:"meldekort"}),".",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.code,{children:"meldekort"})," hadde allerede ganske forvirrende kode med ",(0,t.jsx)(n.a,{href:"https://craco.js.org/",children:"CRACO"}),", React og Redux (dvs. med State, Actions og Reducers) som ble stadig vanskeligere \xe5 vedlikeholde og oppdatere.",(0,t.jsx)(n.br,{}),"\n","Derfor ble det bestemt \xe5 flyttet logikk fra ",(0,t.jsx)(n.code,{children:"meldekort"})," til en ny applikasjon basert p\xe5 Remix - ",(0,t.jsx)(n.code,{children:"meldekort-frontend"})," - for \xe5 gj\xf8re det enklere for andre utviklere \xe5 jobbe med koden.",(0,t.jsx)(n.br,{}),"\n","Ingen endringer ble gjort i backend-koden."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"meldekort-frontend"})," er en ganske vanlig Remix-applikasjon. Det eneste som interessant her er at vi m\xe5 hente alle tekster fra ",(0,t.jsx)(n.code,{children:"meldekort-api"})," iht valgt meldekort.\nApplikasjonen pr\xf8ver \xe5 laste ned tekstene fra ",(0,t.jsx)(n.code,{children:"/locales/:sprak/:fraDato.json"}),". Slike requester fanges opp av server.js. Server.js sender request videre til ",(0,t.jsx)(n.code,{children:"meldekort-api"}),", f\xe5r tekstene derfra og returnerer dem.\nDermed f\xe5r applikasjonen tekstene fra ",(0,t.jsx)(n.code,{children:"meldekort-api"})," uten \xe5 vite om dette."]})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(k,{...e})}):k(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>i});var t=r(7294);const o={},d=t.createContext(o);function i(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);